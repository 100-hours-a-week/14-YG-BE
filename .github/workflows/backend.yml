name: Backend CI/CD

on:
  push:
    branches: [test/sally]
  workflow_dispatch:

env:
  IMAGE_NAME: himello/be_moongsan
  CONTAINER_NAME: be-moongsan
  DEPLOY_DIR: /home/${{ secrets.SSH_USER }}/backend
  DOCKER_TAG: dev-${{ github.sha }}

jobs:
  ci:
    name: CI - Test and Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Generate env.prod file from GitHub Secrets
        run: |
          mkdir -p envs
          cat > envs/env.prod <<EOF
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DRIVER=${{ secrets.DB_DRIVER }}

          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          SPRING_REDIS_HOST=${{ secrets.REDIS_HOST }}
          SPRING_REDIS_PORT=${{ secrets.REDIS_PORT }}

          CLOUD_AWS_CREDENTIALS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          CLOUD_AWS_CREDENTIALS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          CLOUD_AWS_REGION_STATIC=${{ secrets.AWS_REGION }}
          CLOUD_AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}

          AI_SERVICE_BASE_URL=${{ secrets.AI_SERVICE_BASE_URL }}

          MONGO_DB=${{ secrets.MONGO_DB }}
          MONGO_DB_URI=${{ secrets.MONGO_DB_URI }}

          FLYWAY_URL=${{ secrets.DB_URL }}
          FLYWAY_USER=${{ secrets.DB_ROOT_USER }}
          FLYWAY_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          FLYWAY_SCHEMAS=${{ secrets.DB_NAME }}

          OAUTH_KAKAO_CLIENT_ID=${{ secrets.OAUTH_KAKAO_CLIENT_ID }}
          OAUTH_KAKAO_REDIRECT_URI=${{ secrets.OAUTH_KAKAO_REDIRECT_URI }}

          logging.level.org.springframework.data.redis=DEBUG
          EOF

      - name: Build without tests
        run: ./gradlew clean build -x test

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$DOCKER_TAG .

      - name: Save Docker image as tar
        run: docker save -o app.tar $IMAGE_NAME:$DOCKER_TAG

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: app.tar

      - name: Upload env file artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-prod
          path: envs/env.prod

  cd:
    name: CD - Deploy to Remote Server
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: .

      - name: Download env file artifact
        uses: actions/download-artifact@v4
        with:
          name: env-prod
          path: .

      - name: Copy artifacts to remote server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            app.tar
            env.prod
          target: ${{ env.DEPLOY_DIR }}

      - name: Deploy on remote server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd $DEPLOY_DIR

            docker load -i app.tar

            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            docker run -d -p 8080:8080 --name $CONTAINER_NAME \
              --env-file env.prod \
              $IMAGE_NAME:$DOCKER_TAG