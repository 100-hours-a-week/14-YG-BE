name: Backend CI/CD

on:
  push:
    branches: [test/sally]
  workflow_dispatch:

env:
  IMAGE_NAME: sally2020s/be_moongsan
  CONTAINER_NAME: be-moongsan
  DEPLOY_DIR: /home/${{ secrets.SSH_USER }}/backend
  DOCKER_TAG: dev-${{ github.sha }}

jobs:
  build:
    name: CI - Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build without tests
        run: ./gradlew clean build -x test

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$DOCKER_TAG .

      - name: Save Docker image as tar file
        run: docker save -o app.tar $IMAGE_NAME:$DOCKER_TAG

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: app.tar

  deploy:
    name: CD - Deploy to Remote Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: .

      - name: Copy app.tar to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: app.tar
          target: ${{ env.DEPLOY_DIR }}

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.0.0
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          DEPLOY_DIR: ${{ env.DEPLOY_DIR }}
          DOCKER_TAG: ${{ env.DOCKER_TAG }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: IMAGE_NAME,CONTAINER_NAME,DEPLOY_DIR,DOCKER_TAG
          script: |
            cd $DEPLOY_DIR

            docker load -i app.tar

            cat > env.prod <<EOF
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_DRIVER=${{ secrets.DB_DRIVER }}

            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            SPRING_REDIS_HOST=${{ secrets.REDIS_HOST }}
            SPRING_REDIS_PORT=${{ secrets.REDIS_PORT }}

            CLOUD_AWS_CREDENTIALS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            CLOUD_AWS_CREDENTIALS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            CLOUD_AWS_REGION_STATIC=${{ secrets.AWS_REGION }}
            CLOUD_AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}

            AI_SERVICE_BASE_URL=${{ secrets.AI_SERVICE_BASE_URL }}

            MONGO_DB=${{ secrets.MONGO_DB }}
            MONGO_DB_URI=${{ secrets.MONGO_DB_URI }}

            FLYWAY_URL=${{ secrets.FLYWAY_URL }}
            FLYWAY_USER=${{ secrets.FLYWAY_USER }}
            FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD }}
            FLYWAY_SCHEMAS=${{ secrets.FLYWAY_SCHEMAS }}

            OAUTH_KAKAO_CLIENT_ID=${{ secrets.OAUTH_KAKAO_CLIENT_ID }}
            OAUTH_KAKAO_REDIRECT_URI=${{ secrets.OAUTH_KAKAO_REDIRECT_URI }}

            logging.level.org.springframework.data.redis=DEBUG
            EOF            # 기존 컨테이너 정리
            echo "Cleaning up existing containers..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # 새 컨테이너 시작 (Flyway baseline 설정)
            echo "Starting new container with Flyway baseline..."
            docker run -d \
              -p 8080:8080 \
              --name $CONTAINER_NAME \
              --env-file env.prod \
              --network moongsan-net \
              -e SPRING_FLYWAY_BASELINE_ON_MIGRATE=true \
              -e SPRING_FLYWAY_BASELINE_VERSION=10 \
              -e SPRING_FLYWAY_VALIDATE_ON_MIGRATE=false \
              $IMAGE_NAME:$DOCKER_TAG

            # 컨테이너 시작 확인
            echo "Waiting for container to start..."
            sleep 15
            docker logs $CONTAINER_NAME --tail 30
