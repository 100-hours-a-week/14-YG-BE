buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "mysql:mysql-connector-java:8.0.33"
	}
}


plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'org.flywaydb.flyway' version '10.20.1'
	id 'java-test-fixtures'
}

group = 'com.moogsan'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencyManagement {
	imports {
		mavenBom "software.amazon.awssdk:bom:2.20.0"
	}
}

flyway {
	url = System.getenv("FLYWAY_URL")
	user = System.getenv("FLYWAY_USER")
	password = System.getenv("FLYWAY_PASSWORD")
	schemas = [System.getenv("FLYWAY_SCHEMAS")]
	locations = ['filesystem:src/main/resources/db/migration']
	driver = 'com.mysql.cj.jdbc.Driver'
}

dependencies {
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation "software.amazon.awssdk:s3"
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20211018.1'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'com.vdurmont:emoji-java:5.1.1'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation("org.springframework.boot:spring-boot-autoconfigure")
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'javax.servlet:javax.servlet-api:4.0.1'
	testFixturesImplementation 'org.springframework:spring-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	implementation "org.springframework.kafka:spring-kafka"
	implementation("org.springframework.kafka:spring-kafka-test")
}

test {
	systemProperty "spring.profiles.active", "test"
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
